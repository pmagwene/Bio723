data(iris)
iris
help.start()
library(reshape)
head(airquality)
head(chickweight)
head(ChickWeight)
chick_m <- melt(ChickWeight, id=2:4, na.rm=TRUE)
head(chick_m)
head(tips)
foo <- melt(tips)
head(tips)
head(foo)
library(ggplots)
library(ggplot2)
head(diamonds)
head(iris)
plot( x = Sepal.Length, y = Petal.Length)
plot( x = Sepal.Length, y = Petal.Length, data = iris)
plot( x = iris$Sepal.Length, y = iris$Petal.Length)
head(iris)
str(iris)
head(iris)
localenv
head(diamonds)
head(diamonds)
dim(diamonds)
str(diamonds)
str(dat)
library(reshape)
library(ggplot2)
library(flowCore)
library(flowViz)
library(gdata)
library(doMC)
source("~/R_fxns/flowAnalysisFxns.R")
source("~/R_fxns/theme_clean.R")
source("~/R_fxns/wheatGermAgglutininAnalysis.R")
registerDoMC(4)
getDoParWorkers()

baseDir = "/Users/colinmaxwell/Documents/Work/bet_hedging/2013-08-08_ploidy_and_stress_growth_pilot"
pheno = "/Users/colinmaxwell/Documents/Work/bet_hedging/2013-08-08_ploidy_and_stress_growth_pilot/pheno.csv"


flowset <- getData(pheno,baseDir)

experiments = list( A = c(pheno, baseDir))

system.time(
    gated <- list(gateMorphology(flowset, normGate = TRUE))
    )
'org_babel_R_eoe'
rm(flowsets)
gc()

phenos <- lapply( experiments, function(x) read.csv(x[[1]], row.names=1))

dat <- mapply( function( X, Y){
  extractForPlotting( X, Y, c("FSC-A", "SSC-A","B1-A","Y1-A", "V1-A"))
}, gated, phenos, SIMPLIFY = FALSE)
dat <- lapply( dat, function(x) x[,c("strain", "treatment", "type", "FSC.A", "SSC.A","B1.A","Y1.A", "V1.A")])

rm(gated)

dat <- melt(dat, id.vars=colnames(dat[[1]]))
 
system.time(
    dat.restricted <- ddply(dat, .(treatment, strain, type), function(x){
        if(nrow(x) <= 10000){ return(x)}
        x[sample(1:nrow(x), 10000),]
    })
    )
'org_babel_R_eoe'
system.time(
    restrDat <- ddply( dat, .(strain, type, treatment), restrictData, top = 0.999)
    )
'org_babel_R_eoe'
getwd()
setwd("/Users/colinmaxwell/Documents/Work/bet_hedging/2013-08-08_ploidy_and_stress_growth_pilot/writeup/")
restrDat <- subset(restrDat, Y1.A < 20000)
'org_babel_R_eoe'

doNewGrowth <- function(x){
  noGrowth <- subset(x, type == 'noGrowth')
  x$newG <- x$B1.A < quantile(noGrowth$B1.A, 0.2)
  x
}

system.time(
    newGrowth <- ddply(restrDat, .(strain), doNewGrowth, .parallel = FALSE)
    )

system.time(
    newGrowth.restricted <- ddply(subset(newGrowth, type == 'growth'), .(strain), function(x){
    if(nrow(x) <= 10000){ return(x)}
    x[sample(1:nrow(x), 10000),]
    })
    )
'org_babel_R_eoe'
empBudEst = ddply( subset(newGrowth, newG), .(strain), function(x) round(median(x$Y1.A)))
cast(empBudEst, strain~., value = "V1")
'org_babel_R_eoe'

getAbsPredicted <- function(da, be, ae){
  ## This function takes a data frame with the growth, no growth, and
  ## no second stain controls as well as two named character vectors.
  ## 'be' (bud estimate) maps between the strain ID and the estimate
  ## for the intensity of a single bud in the second stain.
  ## 'ae' (age estimate) maps between the strain ID and the intensity of
  ## the first stain.
  ## The predicted growth is found by fitting a linear model to the
  ## first and second stain in the no growth control.
  ## Both the first and the second stain are normalized using 'be'
  ## and 'ae' to express the intensity values as 'buds'.
  ## Finally, the data is restricted to the 'growth' and 'no growth'
  ## conditions and to intensities of the first stain that are lower
  ## than the maximum intensity in the growth control.
  pos = unique(da$strain)
  maxGrowth <- max(subset(da, type == "growth")$B1.A)
  plotDat <- subset(da, B1.A < maxGrowth)  
  withoutGrowth <- subset(plotDat, (type == "noGrowth"))
  withoutGrowth$bin <- cut(withoutGrowth$B1.A, 100)
  withoutGrowth.sub <- ddply(withoutGrowth, .(bin), function(x){
                             if( nrow(x) < 100){
                                 toSample = nrow(x)
                             }
                             else{
                                 toSample = 100
                             }
                             x[sample(1:nrow(x), toSample),]
                         })
  #stop()
  #plot(Y1.A~B1.A, withoutGrowth.sub, log="xy", cex=0.1)
  #loe <- getFitLoess(withoutGrowth.sub, plot = TRUE)
  #plot(loe)
  plotDat$predictedGrowth <- predict(getFitLoess(withoutGrowth.sub), plotDat)
  plotDat$absGrowth <- (plotDat$Y1.A - plotDat$predictedGrowth)/be[as.character(pos)]
  plotDat$absAge <- (plotDat$B1.A)/ae[as.character(pos)]  
  #if( any( is.na( plotDat[,c("absGrowth", "absAge")]) )){ stop("NA detected") }
  plotDat
}

getReverseFit <- function(wog, plot=FALSE){
    fit <- lm(B1.A~Y1.A, data = wog)
    if(plot){
      plot(wog$B1.A, residuals(fit), log='x')
  }
    fit
  }

getFit <- function(wog, plot=FALSE){
    fit <- lm(Y1.A~B1.A, data = wog)
    if(plot){
      plot(wog$B1.A, residuals(fit), log='x')
    }
    fit
  }

getFitLoess <- function(wog, plot=FALSE){
    fit <- loess(Y1.A~B1.A, data = wog)
    if(plot){
      plot(wog$B1.A, residuals(fit), log='x')
    }
    fit
  }



getCenterOfCutRange <- function( lev, r = 2){
  out <- sapply(
         strsplit(gsub("\\]", "",
                       gsub("\\(", "",
                            lev)),
         ","),
       function(x) mean(as.numeric(x))
  )
  as.character(round(out, r))
}


budEstMean <- ddply(empBudEst, .(strain), function(x)  mean( x$V1))$V1
names(budEstMean) <- names(dlply(empBudEst, .(strain), function(x) unique(x$strain)))

reverseCoefficients <- ddply( subset(restrDat, (type == 'noGrowth')),
                             .(strain),
                             function(x) getReverseFit(x)$coefficients)
greenBudEstMean <- reverseCoefficients[["(Intercept)"]] + reverseCoefficients[["Y1.A"]]*budEstMean
restrDat$treatment <- factor(restrDat$treatment)

predGrowMean <- ddply( newGrowth, .(strain),
                          getAbsPredicted, budEstMean, greenBudEstMean,
                      .parallel = FALSE)

predGrowMean <- subset(predGrowMean, (absAge < 8) & (absAge > 0.5))
predGrowMean$ageBin <- cut(predGrowMean$absAge, 10)
predGrowMean$residuals <- predGrowMean$Y1.A - predGrowMean$predictedGrowth





castFXN <- function(x){
  if(length(x) < 20){
    out <- c(NA, NA, NA)
    names(out) <- c("y", "ymin", "ymax")
    return(out)
  }
  else{
    return( mean_cl_normal( x ) )
  }
}

growByTypeMean = cast( subset(predGrowMean, !newG),
  ageBin+treatment+strain~type,
  fun.aggregate=castFXN,
  value='absGrowth')
'org_babel_R_eoe'
head(tmp)
str(tmp)
head(predGrowMean)
levels(predGrowMean$strain)
levels(predGrowMean$strain2)
head(dat[["melted"]])
quit())
quit()
n
####Sets the working directory
DIRECTORY="/Users/colinmaxwell/small_RNA3/smRNA_paper/"
setwd(DIRECTORY)

source("subroutines/consensusPlots.R")
source("subroutines/theme_clean.R")
source("subroutines/clusterSet.R")

null <- readPandas("/Users/colinmaxwell/small_RNA3/smRNA_clean/tables/NULL.csv")
null[is.na(null)] <- 0
null.padding <- t(sapply( dim(null)[1]:1000000, function(x) c(rep(0,8),"padding")))
colnames(null.padding) <- colnames(null)
null.padded <- rbind( null, null.padding)
null.padded <- null.padded[, -ncol(null.padded)]
scRNA.null <- apply(null.padded[,c("smRNA_2_BC1","smRNA_2_BC3")], 1, function(x) mean(as.numeric(x)))

TSSs <- read.csv("/Users/colinmaxwell/small_RNA3/smRNA_clean/tables/scRNA_around_updated_TSSs2.csv", row.names=1)

TSSs <- TSSs[rownames(TSSs) %in% names(clustDict),]
TSSs[is.na(TSSs)] <- 0
TSS.padding <- t(sapply( dim(TSSs)[1]:length(clustDict), function(x) rep(0,4)))
colnames(TSS.padding) <- colnames(TSSs)
TSS.padded <- rbind( TSSs, TSS.padding)

antisense <- read.csv("/Users/colinmaxwell/small_RNA3/smRNA_clean/tables/GRO_and_scRNA_around_TSSs_rerun_antisense2.csv", row.names=1)
antisense <- antisense[rownames(antisense) %in% names(clustDict),]
antisense[is.na(antisense)] <- 0
antisense.padding <- t(sapply( dim(antisense)[1]:length(clustDict), function(x) rep(0,4)))
colnames(antisense.padding) <- colnames(antisense)
antisense.padded <- rbind( antisense, antisense.padding)

GRO.TSS <- apply(TSS.padded[,c("GROseqA","GROseqB")], 1, function(x) mean(as.numeric(x)))
scRNA.TSS <- apply(TSS.padded[,c("smRNA_2_BC1","smRNA_2_BC3")], 1, function(x) mean(as.numeric(x)))
antisense.TSS <- apply(antisense.padded[,c("smRNA_2_BC1","smRNA_2_BC3")], 1, function(x) mean(as.numeric(x)))
antisense.GRO <- apply(antisense.padded[,c("GROseqA","GROseqB")], 1, function(x) mean(as.numeric(x)))
'org_babel_R_eoe'
uniqueBreaks <- function(values, quantiles){
  breaks = quantile(values, probs=quantiles)
  zero = which(breaks==0)
  top = max(zero)
  bottom = min(zero)
  unique_breaks = c(0, breaks[ -zero ])
  names(unique_breaks) = c(paste(names(breaks)[bottom], names(breaks)[top], sep='-'), names(breaks[-zero]))
  return(unique_breaks)
}

####Sets the working directory
DIRECTORY="/Users/colinmaxwell/small_RNA3/smRNA_paper/"
setwd(DIRECTORY)
  
source("subroutines/theme_clean.R")
source("subroutines/clusterSet.R")
source("subroutines/makeSampled.R")

##Read in the Pol II ChIP-seq data, then restrict it to only genes in the clustDict
zhong <- read.csv("/Users/colinmaxwell/small_RNA3/smRNA_clean/tables/updated_TSSs_noFilters/coverage/zhong-antisense.csv", row.names=1) + read.csv("/Users/colinmaxwell/small_RNA3/smRNA_clean/tables/updated_TSSs_noFilters/coverage/zhong.csv", row.names=1)
colnames(zhong) <- 1:1001
zhong <- subset(zhong, (rownames(zhong) %in% names(clustDict)))

zhong <- subset(zhong, !(rownames(zhong) %in% c("F44E5.4", "F44E5.5")))


##Annotate the pol II data with scRNA, GRO seq, and antisense coverage
zhong2 <- data.frame( zhong, scRNA_count = scRNA.TSS[rownames(zhong)],
                     groseq_count =  GRO.TSS[rownames(zhong)],
                     groseq_antisense = antisense.GRO[rownames(zhong)],
                     scRNA_antisense = antisense.TSS[rownames(zhong)])
zhong2[is.na(zhong2)] <- 0


#Split by scRNA coverage
ub <- uniqueBreaks(zhong2$scRNA_count, seq(0, 1, by=0.1))
zhong2$breaks <- with(zhong2, cut(zhong2$scRNA_count, ub, include.lowest=TRUE))
levels(zhong2$breaks) <- names(ub)
z.spl <- split(as.data.frame(zhong), zhong2$breaks)

#Sample the split data
z.m <- makeSampled(z.spl[-length(z.spl)],100)
'org_babel_R_eoe'
